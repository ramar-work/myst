#!/bin/bash -
# -------------------------------------------- #
# myst.sh
#
# Summary
# -------
# An administration interface for Myst sites.
#
# Author
# ------
#	Antonio R. Collins II (ramar.collins@gmail.com, rc@tubularmodular.com)
# Copyright 2016-Present, Tubular Modular
# Original Author Date: Tue Jul 26 07:26:29 2016 -0400
# 
# Usage
# -----
# ???
# 	
# TODO
# ----
#	- Be able to build from JSON, XML, or something
# - Handle setup tasks and tooling ( like database connections and maintenance ) 
# - Convert cli scripts to Java or C++
# - Make sure user matches server user
# - Add options for Tomcat
# - Add options for SSL (since the cert may be involved at Tomcat's level) 
# - Configure with IIS
# - Configure with nginx 
#
# -------------------------------------------- #

# const 
PROGRAM_NAME=`basename $0`
SYMNAME=myst
PNAME=Myst
CONF_FILE=/etc/myst.conf
LIB_FILE=share/myst/mystlib.sh
SRCREPO=https://github.com/tubularmodular/myst
STABLE_BRANCH=master
CHECK="sed|xxd -h|git -h|md5sum -h|diff"

# unconst
DIR=
THIS_SITE=
SRC=.
DO_SES=0
DO_GENVHOST=0
CREATE=0
UPDATE=0
NO_GIT=0
ACTIVATE=0
VERBOSE=0
ERR_NODIR=1
ERR_NONAME=2
APACHIFY=0
ENGINE=
VHOST_FILE=
BACKUP_FILE=
DO_FINALIZE=0


# An error function
err() {
	STATUS=${2:-0}
	printf "$PROGRAM_NAME: $1\n" > /dev/stderr
	exit $STATUS
}


# A usage function
usage() {
	STATUS=${2:-0}

#-t, --test              Test out data.json with parameters.
#  --maintenance       Put a site in maintenance mode.
#-e, --engine <arg>       Specify which CFML engine you're running [ Lucee, Coldfusion ]
#  --nginx              Create an Apache-style virtual host and an .htaccess file.
#  --iis                Create an Apache-style virtual host and an .htaccess file.
	cat <<USAGES
$PROGRAM_NAME:
Instance options:
-c, --create             Create a new instance. 
-u, --update <arg>       Update the instance at <arg>. 
    --activate <dir>     Activate a site (turn off defaults that ship with new projects)
    --no-git             Don't create a Git repo.
-e, --ses                Enable search engine safe URLs
-b, --basedir <arg>      Specify a base directory.
-f, --folder <arg>       Specify which folder to use when creating a new instance.
-n, --name <arg>         Specify a name to use for a new instance. 
-m, --domain <arg>       Specify a domain name to host this particular instance.
-d, --description <arg>  Specify a description for the new instance.
-s, --datasource <arg>   Specify a default datasource for use with the new instance.
    --finalize <arg>     Finalize a Myst instance.

Modifiers and server-specific options:
    --apache             Create a root-level configuration file compatible with Apache.
-i, --virtual-host <arg> Create a \$SERVER-style virtual host and an .htaccess file.

General options:
-v, --verbose            Be verbose.
-h, --help               Show this help and quit.
USAGES

	exit $STATUS
}


# Check for the config file, and lib files, stopping if either isn't present. 
[ ! -f $CONF_FILE ] && \
	err "$PNAME is not installed yet.  Please run 'make install' from $PNAME's source directory.\n"  1
source $CONF_FILE
[ ! -d $PREFIX ] && err "$PNAME didn't install correctly (couldn't find source directory $PREFIX)\n" 1
[ ! -f $PREFIX/$LIB_FILE ] && err "$PNAME didn't install correctly (couldn't find $LIB_FILE)\n" 1
source $PREFIX/$LIB_FILE


# Catch blank arguments
[ $# -eq 0 ] && usage 0 


# Process any options
while [ $# -gt 0 ]
do
	case "$1" in
		# Administration stuff
		-c|--create)
			CREATE=1
		;;

		# Administration stuff
		-u|--update)
			UPDATE=1
			CODE=`detFlag "$2"`;
			test $CODE -lt 1 && err "$1 needs an argument, got '${2:-(nil)}'. Exiting..." 1 
			shift
			DIR="$1"
		;;


		# Turn off the 'default' that ships
		--activate)
			ACTIVATE=1
			CODE=`detFlag "$2"`;
			test $CODE -lt 1 && err "$1 needs an argument, got '${2:-(nil)}'. Exiting..." 1 
			shift
			THIS_SITE="$1"
		;;

		# Generate server confiuguration files for an Apache server 
		--apache|--apachify)
			APACHIFY=1
			ENGINE='apache'
		;;

		# Generate server confiuguration files for an nginx server 
		--nginx|--nginxify)
			NGINXIFY=1
			ENGINE='nginx'
		;;

		# Generate server confiuguration files for a Microsoft IIS server 
		--iis|--iisify)
			IISIFY=1
			ENGINE='iis'
		;;

		# Enable the capacity to serve SES URLs via server configuration
		-e|--ses|--search-engine-safe)
			DO_SES=1
		;;

		# Turn off the defaults
		--finalize)
			DO_FINALIZE=1
			CODE=`detFlag "$2"`;
			# If it's -1, what does that mean again?
			test $CODE -eq 1 && DIR="$2" || DIR=$DIR
			shift
		;;

		# Generate a virtual host file for a particular server configuration
		-i|--virtual-host)
			DO_GENVHOST=1; CODE=`detFlag "$2"`;
			test $CODE -eq -1 && err "$1 needs an argument, got '${2:-(nil)}'. Exiting..." 1 
			test $CODE -eq 1 && VHOST_FILE="$2" || VHOST_FILE=/dev/stdout
			shift
		;;

		# Don't create a git repo
		--no-git)
			NO_GIT=1
		;;

		# Try parsing data.cfm and check for errors before starting
		-t|--parse-root)
			DO_TESTJSON=1
		;;

		# Parameters 
		-f|--at|--folder)
			# Create this directory
			CODE=`detFlag "$2"`;
			test $CODE -lt 1 && err "$1 needs an argument, got '${2:-(nil)}'. Exiting..." 1 
			shift
			DIR="$1"
		;;

		# Use a different base directory
		-b|--basedir)
			CODE=`detFlag "$2"`;
			test $CODE -lt 1 && err "$1 needs an argument, got '${2:-(nil)}'. Exiting..." 1 
			shift
			BASEDIR="$1"
		;;

		# ...
		-n|--name)
			# Another parameter in data.json
			CODE=`detFlag "$2"`;
			test $CODE -lt 1 && err "$1 needs an argument, got '${2:-(nil)}'. Exiting..." 1 
			shift
			NAME="$1"	
		;;

		# Define the domain names that will be used with a site
		-m|--domain)
			CODE=`detFlag "$2"`;
			test $CODE -lt 1 && err "$1 needs an argument, got '${2:-(nil)}'. Exiting..." 1 
			shift
			DOMAIN="$1"	
		;;

		# Goes in the README
		-d|--description)
			CODE=`detFlag "$2"`;
			test $CODE -lt 1 && err "$1 needs an argument, got '${2:-(nil)}'. Exiting..." 1 
			shift
			DESCRIPTION="$1"	
		;;

		# Specify a datasource
		-s|--datasource)
			CODE=`detFlag "$2"`;
			test $CODE -lt 1 && err "$1 needs an argument, got '${2:-(nil)}'. Exiting..." 1 
			shift
			DATASOURCE="$1"	
		;;

		# Verbose
		-v|--verbose)	
			VERBOSE=1
		;;

		--help)	
			usage 0
		;;

		--)	break
		;;

		-*)	printf "$PROGRAM_NAME: Unknown argument received: $1\n" > /dev/stderr; usage 1
		;;
	esac
	shift
done


# Handle verbosity
[ $VERBOSE -eq 1 ] && MKDIR_FLAGS="-pv" || MKDIR_FLAGS="-p"
[ $VERBOSE -eq 1 ] && CP_FLAGS="-v" || CP_FLAGS=""
[ $VERBOSE -eq 1 ] && MV_FLAGS="-v" || MV_FLAGS=""


# CREATE NEW CMVC INSTANCES
if [ $CREATE -eq 1 ]
then
	# $PNAME's source code will probably be at /etc/
	# When built, this variable will probably be here
	
	# Check that a directory has been specified
	[ -z $DIR ] && err "No directory specified for new instance." $ERR_NODIR	

	# Create a name if not specified
	[ -z $NAME ] && NAME=`basename $DIR`

	# Then default all other variables if they were not specified.
	SRC=$PREFIX
	SHAREDIR=$SRC/share/$SYMNAME
	DATASOURCE=${DATASOURCE:-"(none)"}
	TITLE=${TITLE:-"$NAME"}
	DOMAIN=${DOMAIN:-"$NAME"}
	DESCRIPTION=${DESCRIPTION:-""}

	# Do smart things with the base directory
	BASEDIR=${BASEDIR:-"/"}
	[ ${#BASEDIR} -gt 1 ] && [ ${BASEDIR:0:1} != '/' ] && BASEDIR="/${BASEDIR}"
	[ ${#BASEDIR} -gt 1 ] && [ ${BASEDIR:$(( ${#BASEDIR} - 1 )):1} != '/' ] && BASEDIR="${BASEDIR}/"

	# It's a good time for a message
	[ $VERBOSE -eq 1 ] && {
		printf "Creating new $PNAME instance with the following parameters.\n"
		#Uses Apache?  `test $NO_GIT -eq 1 && echo "No" || echo "Yes"`
		cat <<EOF
DIR         = $DIR
BASEDIR     = $BASEDIR
DATASOURCE  = $DATASOURCE
DOMAIN      = $DOMAIN
TITLE       = $TITLE
DESCRIPTION = $DESCRIPTION

Uses Git?     `test $NO_GIT -eq 1 && echo "No" || echo "Yes"`
EOF
	}

	# Set up a new Myst instance
	[ $VERBOSE -eq 1 ] && printf "\n* Create $PNAME application folders...\n"
	mkdir $MKDIR_FLAGS $DIR/{api,app,assets,components,db,files,log,misc,routes,setup,sql,std,views}/
	mkdir $MKDIR_FLAGS $DIR/assets/{css,img,js}/
	mkdir $MKDIR_FLAGS $DIR/db/static/
	mkdir $MKDIR_FLAGS $DIR/std/custom/
	mkdir $MKDIR_FLAGS $DIR/std/components/


	# Populate the new instance
	[ $VERBOSE -eq 1 ] && printf "\n* Populating new $PNAME instance...\n"
	cp $CP_FLAGS $SHAREDIR/{Application.cfc,$SYMNAME.cfc,index.cfm,data.cfm,data.cfm.example} $DIR/
	cp $CP_FLAGS $SHAREDIR/app-default.cfm $DIR/app/default.cfm
	cp $CP_FLAGS $SHAREDIR/views-default.cfm $DIR/views/default.cfm
	cp $CP_FLAGS $SHAREDIR/failure.cfm $DIR/std/
	cp $CP_FLAGS $SHAREDIR/setup.cfm $DIR/api/
	cp $CP_FLAGS $SHAREDIR/{4xx,5xx,mime,html}-view.cfm $DIR/std/
	cp $CP_FLAGS $SHAREDIR/components/* $DIR/std/components/
	cp $CP_FLAGS $SHAREDIR/base.cfc $DIR/components/
	[ $VERBOSE -eq 1 ] && echo DONE!


	# Set up Application redirects
	[ $VERBOSE -eq 1 ] && printf "\n* Setting up redirects...\n"
	for _d in app components db log files misc routes setup sql std views
	do 
		[ $VERBOSE -eq 1 ] && echo cp $SHAREDIR/Application-Redirect.cfc $DIR/$_d/Application.cfc
		cp $SHAREDIR/Application-Redirect.cfc $DIR/$_d/Application.cfc
	done
	[ $VERBOSE -eq 1 ] && echo DONE!


	# Set up assets
	[ $VERBOSE -eq 1 ] && printf "\n* Setting up assets...\n"
	cp $CP_FLAGS $SHAREDIR/*.css $DIR/assets/
	[ $VERBOSE -eq 1 ] && echo DONE!


	# Modify the data.cfm in the new directory to actually work
	[ $VERBOSE -eq 1 ] && printf "\n* Modifying data.cfm...\n"
	test -z `uname | grep 'Darwin'` && IS_MAC=0 || IS_MAC=1


	# If we're on an Apple system, the sed commands will have to be different.
	sed -i -e "{
		s/__DATASOURCE__/${DATASOURCE}/
		s;__COOKIE__;`xxd -ps -l 60 /dev/urandom | head -n 1`;
		s;__BASE__;${BASEDIR:-"/"};
		s/__NAME__/${NAME:-"anon"}/
		s/__AUTHOR__/${AUTHOR:-"Buddy Noone"}/
		s/__TITLE__/${TITLE:-"Titleless Website"}/
	}" $DIR/data.cfm
	[ $VERBOSE -eq 1 ] && echo DONE!


	# Also modify the datasource in Application.cfc
	sed -i -e "{
		s/__DATASOURCE__/${DATASOURCE}/
	}" $DIR/Application.cfc
	[ $VERBOSE -eq 1 ] && echo DONE!


	#Create git repo 
	if [ $NO_GIT -eq 0 ]
	then 
		[ $VERBOSE -eq 1 ] && printf "\nCreating the Git repository for this project...\n"
		touch $DIR/.gitignore
		cd $DIR
		git init
		{
		echo <<GIT
# Filter out everything
*

# Explicitly add the framework's directories
!api/*
!app/*
!assets/{css,js}/*
!components/*
!routes/*
!setup/*
!sql/*
!std/*
!views/*
GIT
		} > .gitignore
		git add .
		git commit -m "Standard first commit."
		cd -
		[ $VERBOSE -eq 1 ] && echo DONE!
	fi	
fi



# Update site backend and tools with the newest version from the most current
# HEAD
if [ $UPDATE -eq 1 ]
then
	# Checks 
	[ ! -z "$DIR" ] || err "No application specified for update."
	[   -d "$DIR" ] || \
		err "The application at folder '$DIR' does not seem to exist or is not accessible." 1
	[   -f "$DIR/$SYMNAME.cfc" ] || \
		err "The application at folder '$DIR' does not seem to be a Myst application." 1

	# I don't really need Git to control rollbacks, it's nice, but not necessary
	[ $VERBOSE -eq 1 ] && echo "Pulling latest copy of $SYMNAME repository."
	# TODO: Do a simple HTTP GET for the latest version and untar.  These tools
	# are more or less guaranteed to be present on a system, whereas Git won't.
	git clone $SRCREPO /tmp/myst
	#cd /tmp/myst/ && git checkout -b $STABLE_BRANCH && git pull github $STABLE_BRANCH && cd -
	cd /tmp/myst/ && git checkout $STABLE_BRANCH && cd -
	mv $MV_FLAGS $DIR/myst.cfc $DIR/myst_.cfc
	cp $CP_FLAGS /tmp/myst/myst.cfc $DIR/
	# Right now, the user will need to look before he/she leaps and merge Application.cfc manually
	cp $CP_FLAGS /tmp/myst/share/Application.cfc $DIR/Application.cfc.new
	# Also explicitly copy the new base.cfc
	cp $CP_FLAGS /tmp/myst/share/base.cfc $DIR/components/
	rm -rf /tmp/myst/
	exit 0
fi


# Generate additional Tomcat hosts
if [ 0 -eq 1 ]
then
	#Generate the scaffolding for a new VirtualHost for Lucee
	HOST_CONTENT=$(cat <<LUCEE_HOST
	\t\t<!-- #BEGIN:$NAME -->\n\t\t<Host name="${NAME}" appBase="webapps">\n\t\t\t<Context path="" docBase="${DIR}" />\n\t\t\t<Alias>${DEV_ALIAS}</Alias>\n\t\t</Host>\n\t\t<!-- #END:$NAME -->\n
LUCEE_HOST
	) #This is the end of variable declaration

	#Create a new VirtualHost for Lucee
	#sed -i "{ s|\(<!-- ADD NEW HOSTS HERE -->\)|\1\n${HOST_CONTENT}| }" $LUCEE_CONF
fi



# ACTIVATE NEW CMVC INSTANCES
if [ $ACTIVATE -eq 1 ]
then
	#
	[ $VERBOSE -eq 1 ] && printf "Checking for valid $PNAME instance '$THIS_SITE'...\n" 

	# Could be thrown after --create, so prefill
	THIS_SITE="${THIS_SITE:-$DIR}"

	# Check for the folder 
	test ! -z "$THIS_SITE" || err "Folder not specified...\n" 1

	# Check that it's not an option...
	[ "${THIS_SITE:0:1}" == "-" ] && err "No folder supplied, got option flag...\n" 1

	# Check that it's a real folder
	test -d "$THIS_SITE" || err "Folder does not exist...\n" 1

	# Check that it's an instance
	test -d "$THIS_SITE/app" && test -d "$THIS_SITE/views" || err "Folder is not a $PNAME instance...\n" 1
		
	# Check that the files we need to move exist
	test -f $THIS_SITE/app/default.cfm || err "Default model file may have already been modified...\n" 1
	test -f $THIS_SITE/views/default.cfm || err "Default model file may have already been modified...\n"

	# MD5s
	# 40f7640ea4c8c584ca8dca6e9d6de90f  app-default.cfm
	# 0e43c92b7c7091c0f293cba12d2fd103  views-default.cfm
	APPD_MD5="40f7640ea4c8c584ca8dca6e9d6de90f"
	VIEWD_MD5="0e43c92b7c7091c0f293cba12d2fd103"
	APPD_NEW_MD5=`md5sum $THIS_SITE/app/default.cfm | awk '{ print $1 }'`
	VIEWD_NEW_MD5=`md5sum $THIS_SITE/views/default.cfm | awk '{ print $1 }'`
	#echo $APPD_NEW_MD5 $APPD_MD5
	
	# Check the files	
	[ $VERBOSE -eq 1 ] && printf "Checking for valid checksums...\n" 
	[[ $APPD_NEW_MD5 != $APPD_MD5 ]] || { printf "Default model file may have already been modified...\n"; exit 1; }
	[[ $VIEWD_NEW_MD5 != $VIEWD_MD5 ]] || { printf "Default model file may have already been modified...\n"; exit 1; }

	# Move both files to the std directory under a differnet name
	[ $VERBOSE -eq 1 ] && printf "Moving files...\n" 
	mv $MV_FLAGS $THIS_SITE/app/default.cfm $THIS_SITE/std/app-default.cfm	
	mv $MV_FLAGS $THIS_SITE/views/default.cfm $THIS_SITE/std/views-default.cfm	

	# Make some new ones
	touch $THIS_SITE/app/default.cfm
	touch $THIS_SITE/views/default.cfm
	[ $VERBOSE -eq 1 ] && printf "Done.\n" 
fi


# Generate SES urls for Apache hosts
if [ $DO_SES -eq 1 ]
then
	# Make sure the user specified a directory
	[ ! -z "$DIR" ] || err "No directory specified for extension-less URL setup..." 1
	[ ! -z "${DOMAIN:-$NAME}" ] || err "No domain or site name specified for extension-less URL setup..." 1
	[[ ! -z "$ENGINE" ]] || err "No server specified for extension-less URL setup..." 1

	# Make/add to an .htaccess file
	if [ $APACHIFY -eq 1 ]
	then
		{
			cat <<EOF
# .htaccess for site titled '${DOMAIN:-$NAME}', generated `date`
RewriteEngine on
RewriteRule ^/?([a-z]+)$ \$1.cfm [L]
EOF
		} >> $DIR/.htaccess
	fi

	# Add the .htaccess to the repository if .git is activated
	if [ $CREATE -eq 1 ] && [ -d $DIR/.git/ ] 
	then
		cd $DIR
		git add .htaccess
		git commit -m "Added .htaccess file for URL handling."
		cd -
	fi
fi 


# Create a virtual host for the server engine in use.
if [ $DO_GENVHOST -eq 1 ] || [ $CREATE -eq 1 ]
then
	# Make sure the user specified a directory
	# [ ! -z "$DIR" ] || err "No directory specified for vhost..." 1
	# Make sure that directory exists
	#[ -d "$DIR" ] || err "Directory does not exist, invalid vhost..." 1;
	# Check that at least one server is specified
	[ $APACHIFY -eq 1 ] || err "No server specified. (Try --apachify)" 1

	# Generate an Apache virtual host
	if [ $APACHIFY -eq 1 ]
	then
		# Get some configuration details
		httpd -t -D DUMP_RUN_CFG || err "Apache is misconfigured on this system... Can't generate virtualhost."
		APACHE_DOCROOT="`httpd -t -D DUMP_RUN_CFG 2>/dev/null|grep 'DocumentRoot:'| awk '{ print $3 }' | sed 's/"//g' `"

		# Name should probably not be turned off
		#[ ! -z "$DOMAIN" ] || err "No name specified for vhost..." 1
		[ ! -z "${DOMAIN:-$NAME}" ] || err "No domain or site name specified for vitual host..." 1

		# If this is a CREATE run, we'll generate a virtual host and put it in misc/
		[ $CREATE -eq 1 ] && VHOST_FILE=$DIR/misc/apache.vhost

		# Virtual host file 
		{
	cat <<EOF
# Apache virtual host for site titled '${DOMAIN:-$NAME}', generated `date`
<VirtualHost *:80>
	# Admin email, Server Name (domain name) and any aliases
	ServerName  ${DOMAIN:-$NAME}
	ServerAlias www.${DOMAIN:-$NAME}

	# Index file and Document Root (where the public files are located)
	DocumentRoot $APACHE_DOCROOT/${DOMAIN:-$NAME}/

	# Custom log file locations
	LogLevel warn
	ErrorLog  $APACHE_DOCROOT/${DOMAIN:-$NAME}/log/srvError.log
	CustomLog $APACHE_DOCROOT/${DOMAIN:-$NAME}/log/srvAccess.log combined

EOF

		# Index
		cat <<EOF
	# Auto directory
	DirectoryIndex index.cfm index.html
</VirtualHost>
EOF
		} > $VHOST_FILE

		# Lastly, if this is a CREATE run and we haven't done any work, add this file too. 
		if [ $CREATE -eq 1 ] && [ -d $DIR/.git/ ] 
		then
			cd $DIR
			git add misc/apache.vhost
			git commit -m "Added Apache virtual host template."
			cd -
		fi
	fi
fi


# The finalize command
if [ $DO_FINALIZE -eq 1 ]
then
	[ ! -z "$DIR" ] || err "No application specified for finalizing."
	[   -d "$DIR" ] || \
		err "The application at folder '$DIR' does not seem to exist or is not accessible." 1
	[   -f "$DIR/$SYMNAME.cfc" ] || \
		err "The application at folder '$DIR' does not seem to be a Myst application." 1

	# Check that it's not the same
	#memcmp( );
	RENAME=0
	if [ ! -f $DIR/app/default.cfm ]
	then
		RENAME=1	
	else
		DESTFILE=`sum $DIR/app/default.cfm | awk '{ print $1 }'`
		SRCFILE=`sum $PREFIX/share/myst/app-default.cfm | awk '{ print $1 }'`
		[ $DESTFILE -eq $SRCFILE ] && RENAME=1
	fi

	if [ $RENAME -eq 1 ]
	then
		# [[ `cat $DIR/app/default.cfm` == `cat $PREFIX.cfm` ]] 
		mv $MV_FLAGS $DIR/app/default.cfm $DIR/app/_default.cfm
		mv $MV_FLAGS $DIR/views/default.cfm $DIR/views/_default.cfm
		touch $DIR/{app,views}/default.cfm
	fi	
fi


# vim: ff=unix
