#!/bin/sh -
# -------------------------------------------- #
# mystmod.sh
#
# @author
#		Antonio R. Collins II (rc@tubularmodular.com, ramar.collins@gmail.com)
#
# @copyright
# 	Copyright 2016-Present, "Tubular Modular"
# 	Original Author Date: Tue Jul 26 07:26:29 2016 -0400
# 
# @summary
# 	A way to create new "plugins"
#
# @usage
# 	
#
# 
# @todo
#		- Be able to build from JSON
# 	- Handle setup tasks and tooling ( like database connections and maintenance ) 
# 	- Convert to Java or C++
#		- Download "modules" via some web site somewhere and place them into this chain
# -------------------------------------------- #

# Variable list
PROGRAM_NAME=mystmod
CONF_FILE=/etc/myst.conf
LIB_FILE=share/myst/mystlib.sh

DIR=
ADDR=
EXTRACT_DIR=
CREATE_NEW_MOD=0
MERGE_DIR=
DO_INSTALL=0
DO_EXTRACT=0
DO_MERGE=0
DO_UPLOAD=0
DO_CREATE=0
DO_SETUP=0
DO_LIST=0
DO_COMPRESS=0
#SRC= This will be filled out during the install process...
SRCDIR=.
NO_GIT=0
ERR_NODIR=1
ERR_NONAME=2
VERBOSE=0


# An error function
err() {
	STATUS=${2:-0}
	printf "$PROGRAM_NAME: $1\n" > /dev/stderr
	exit $STATUS
}


# A usage function
usage() {
	STATUS=${2:-0}

	cat <<USAGES
$0:
Creation options:
-c, --create <arg>      Create a new module named <arg>.
-f, --folder <arg>      Specify which folder to use when creating a new module.
-n, --name <arg>        Specify a name to use for the new module. 
-t, --test-on <arg>     Compresses the current Git HEAD and applies to a Myst instance. 

Install options:
-i, --install <arg>     Choose a module to install.
-e, --extract <arg>     Extract a potential module's files from a live instance.
    --from <arg>        Choose folder or file where the project may be. (BETA)
    --to <arg>          Install the extension to <arg> 

Metadata options:
-a, --author <arg>       Specify an author for the new module.
-d, --description <arg>  Specify a description for the new module.
    --datasource <arg>   Specify a default datasource for use with the new instance.

Post-install options:
    --address <arg>      Specify a web address of an instance for completing module setup.
    --setup              Run module setup routines.
-o, --module <arg>       Load this module during setup if running setup by itself.

-l, --list               List all of the available modules.
-v, --verbose            Be verbose.
-h, --help               Show this help and quit.
USAGES

	exit $STATUS
}


# Check for dependencies
check() {
	if [ -z "$1" ]
	then 
		printf "check(): No list specified.  Fix this.\n"
		exit 1
	fi	

	IFS='|'
	for n in $1
	do 
		sh -c ${n} 2>/dev/null
		if [ $? -eq 127 ]
		then 
			printf "$PROGRAM_NAME: Dependency '$n' not found.  " > /dev/stderr
			printf "Please install package '$n' using a package manager.\n" > /dev/stderr
		fi
	done
	IFS=" "
}


# Determine whether an argument is a flag or not
detFlag() {
	if [ -z "$1" ]
	then
		echo -1 
	else
		# arg is a single, lonely dash
		if [ ${#1} -eq 1 ] && [ $1 == '-' ] 
		then
			echo 0

		# arg is a short arg flag 
		elif [ ${1:0:1} == '-' ] && [[ ${1:1:1} =~ [a-z] ]]
		then
			echo -1 

		# arg is a long arg flag 
		elif [ ${1:0:1} == '-' ] && [ ${1:1:1} == '-' ]
		then
			echo -1 

		# arg is an arg
		else
			echo 1

		fi
	fi
}
# Some tests
#detFlag "boss"
#detFlag "-a"
#detFlag "-"
#detFlag "--achoo"
#exit


# Check for the config file, and lib files, stopping if either isn't present. 
[ ! -f $CONF_FILE ] && \
	err "$PNAME is not installed yet.  Please run 'make install' from $PNAME's source directory.\n"  1
source $CONF_FILE
[ ! -d $PREFIX ] && err "$PNAME didn't install correctly (couldn't find source directory $PREFIX)\n" 1
[ ! -f $PREFIX/$LIB_FILE ] && err "$PNAME didn't install correctly (couldn't find $LIB_FILE)\n" 1
source $PREFIX/$LIB_FILE


# Catch blank arguments
[ $# -eq 0 ] && usage 0 


# Process any options
while [ $# -gt 0 ]
do
	case "$1" in
		# Specify a web address to help the install process
		-a|--address)
			shift
			ADDR="$1"
		;;

		# This is for something
		--new)
			CREATE_NEW_MOD=1
		;;

		# Administration stuff
		--setup)
			DO_SETUP=1
		;;

		# List all of the available modules...
		-l|--list)
			DO_LIST=1
		;;

		# Administration stuff
		-c|--create)
			DO_CREATE=1
			shift
			MODNAME="$1"	
		;;

		--apachify)
			# Create an Apache style virtual host and an .htaccess file
			APACHIFY=1
		;;

		--no-git)
			# Don't create a git repo
			NO_GIT=1
		;;

		# Parameters 
		-f|--folder)
			# Create this directory
			shift
			DIR="$1"
		;;

		-e|--extract)
			# Specify which engine so the right virtual host file will be generated
			DO_EXTRACT=1
			shift
			MODNAME="$1"
		;;

		-a|--author)
			shift
			AUTHOR="$1"	
		;;

		-n|--name)
			shift
			MODNAME="$1"	
		;;

		# This is just going to be the name...
		-i|--install)
			DO_INSTALL=1	
			shift
			MODNAME="$1"	
		;;

		-o|--module)
			shift
			MODITEM="$1"	
		;;

		--from)
			shift
			FROMPATH="$1"
#MODPATH="$1"
		;;

		--to)
			# Another parameter in data.json
			shift
			TOPATH="$1"
#FOLDER="$1"	
		;;

		-m|--domain)
			# This isn't truly necessary, but it can be used in data.json 
			shift
			DOMAIN="$1"	
		;;

		-d|--description)
			# Goes in the README
			shift
			DESCRIPTION="$1"	
		;;

		-s|--datasource)
			# Specify a datasource
			shift
			DATASOURCE="$1"	
		;;

		-v|--verbose)	
			# Verbose
			VERBOSE=1
		;;

		--help)	
			usage 0
		;;

		--)	break
		;;

		-*)	printf "$PROGRAM_NAME: Unknown argument received: $1\n" > /dev/stderr; usage 1
		;;
	esac
	shift
done


# choose between --install and --extract
if [ $DO_INSTALL -eq 1 ] 
then
	FOLDER=$TOPATH
	MODPATH=$FROMPATH	
fi


if [ $DO_EXTRACT -eq 1 ] 
then
	FOLDER=$FROMPATH
	MODPATH=$TOPATH	
fi


# if FOLDER is needed, it ought to be a full path
if [ ! -z "$FOLDER" ] 
then
	FOLDER=`realpath $FOLDER`
	echo $FOLDER
fi


# Check the $CONF_FILE for either file:// or http://
REPO_FETCH_CMD=
REPO_LIST_CMD=
source $CONF_FILE

[ -z "$REPO_PATH" ] && err "No repository path specified in $CONF_FILE" 1

if [[ ${REPO_PATH:0:7} == "http://" ]] || [[ ${REPO_PATH:0:8} == "https://" ]] 
then
	err "http[s] URIs are not supported yet."
	MODPATH=$REPO_PATH
	REPO_LIST_CMD=wget
else
	MODPATH=$REPO_PATH
	REPO_LIST_CMD=
fi

# List the repos
if [ $DO_LIST -eq 1 ] 
then
	if [ ! -d $MODPATH ]
	then
		err "$MODPATH does not seem to exist."
	else
		cd $MODPATH
		find . -maxdepth 1 -type d 2>/dev/null | \
			sort | \
			sed 1d | \
		xargs -IFF sh -c 'printf "%-20s - %s\n" "`basename FF`"'
		cd -
	fi
fi


# The create routines.
if [ $DO_CREATE -eq 1 ]
then
	test ! -z $MODNAME || err "No module name specified." 1
	test ! -z $DIR || err "No directory specified." 1

	mkdir -pv $DIR/{api,app,components,db,misc,overrides,setup,sql,std,views}/$MODNAME/
	mkdir -pv $DIR/assets/{css,js,img}/$MODNAME/
	mkdir -v $DIR/routes/

	# Set this now
	SRCDIR=$PREFIX

	for ff in Makefile README.md components/standard.cfc
	do
		DASH_COUNT=`echo $MODNAME | sed 's/[0-9,A-Z,a-z]/-/g'`
		BASENAME=`basename $ff`	
		sed "{
			s/__MODNAME__/$MODNAME/g ; 
			s/__DASHES__/$DASH_COUNT/g ;
			s/__SUMMARY__/${SUMMARY:-''}/g ;
			s/__DESCRIPTION__/${DESCRIPTION:-''}/g ;
			s/__AUTHOR__/${AUTHOR:-''}/g ;
			s/__USAGE__/${USAGE:-''}/g ;
		}" $SRCDIR/share/myst/$PROGRAM_NAME/$BASENAME > $DIR/$ff
	done

	mv -v $DIR/{Makefile,README.md} $DIR/misc/$MODNAME/
	mv -v $DIR/components/standard.cfc $DIR/components/$MODNAME.cfc

	sed "{
		s/__NAMESPACE__/$MODNAME/g;
	}" $SRCDIR/share/myst/$PROGRAM_NAME/modroute.cfm > $DIR/routes/$MODNAME.cfm

	if [ $NO_GIT -eq 0 ]
	then	
		cd $DIR
		touch .gitignore
		git init
		git add .
		git commit -m "Initial commit of module '$MODNAME'"
		cd -
	fi

	[ $VERBOSE -eq 1 ] && printf "Successfully created module '$MODNAME'\n" 
fi


# Upload files to repo.mystframework.com
if [ $DO_UPLOAD -eq 1 ]
then
	echo ''
	# Extract the description, name and other things from README.md and tar it and upload it
	# The user would have to pre-register, so there's that...
fi


# Compress a module and it's assets/dependencies
if [ $DO_COMPRESS -eq 1 ]
then
	echo ''
	tar 2>/dev/null
fi


# Install something to somewhere
if [ $DO_INSTALL -eq 1 ]
then
	# The folder where we're going to put the module
	[ -z "$FOLDER" ] && err "No folder specified to put the new module." 1

	# Not now, but I will need this in the future to locate paths 
	[ -z "$MODNAME" ] && err "No module name specified." 1

	# Should be able to install either from disk, git or web
	[ -z "$MODPATH" ] && err "No module path specified." 1

	# A pretty message
	[ $VERBOSE -eq 1 ] && printf "Installing $MODNAME into $FOLDER (from $MODPATH)...\n"

	# Git 
	if [[ ${MODPATH:0:6} == "git://" ]]
	then
		printf "Clone from git repo: $MODPATH\n"
	# you might need to check that the host exists here...
	# git clone $MODPATH /tmp/$MODITEM || handle failure
	# cd /tmp/$MODPATH && ( git --extract-head... | tar xf - -C $FOLDER/ )

	# Web
	elif [[ ${MODPATH:0:7} == "http://" ]] ||[[ ${MODPATH:0:8} == "https://" ]] 
	then
		printf "Pull from HTTP/HTTPS: $MODPATH\n"
	# ghostbyname ${MODPATH%%...}  # Just pull the hostname and look
		wget -O- $MODPATH | tar xzf - --verbose -C $FOLDER/

	# Assume that this is from a disk 
	else
		printf "Copy from disk: $MODPATH\n"
		stat $MODPATH 1>/dev/null 2>/dev/null || err "Module '$MODNAME' at $MODPATH not found..."
		# Distinguish between files and stuff
		cd $MODPATH
		[ $VERBOSE -eq 1 ] && TARFLAGS="--verbose" || TARFLAGS=	
		#[ $VERBOSE -eq 1 ] && echo git archive --format tar HEAD \| tar xf - -C $FOLDER/
		git archive --format tar HEAD | tar xf - $TARFLAGS --exclude=.gitignore -C $FOLDER/
		#tar cf - . | tar xf - --verbose -C $FOLDER/
		cd -
	fi
fi


# Complete any setup of any kind
if [ $DO_SETUP -eq 1 ]
then
	[ -z "$MODITEM" ] && err "Can't setup unnamed package (use --module)" 1
	[ -z "$ADDR" ] && err "Can't setup the package with no web address. (Specify where the instance lives with --addr \$WWW)"
	[ $VERBOSE -eq 1 ] && echo "wget $ADDR/api/setup.cfm?file=setup.sql&module=$MODITEM"
	# Let's see the header and response text on the command line, cut any leading spaces or tabs
	wget --quiet -O- "$ADDR/api/setup.cfm?file=setup.sql&module=$MODITEM" | sed 's/^[\t, ]//g'
fi


# Extract
if [ $DO_EXTRACT -eq 1 ]
then
	# check that required arguments exist is actually an instance
	[ -z "$MODNAME" ] && err "Can't extract unspecified package (--extract needs an argument)." 1
	[ -z "$FOLDER" ] && err "No folder to extract module from (use --folder or --from)." 1

	[ $VERBOSE -eq 1 ] && CPFLAGS="-rv" || CPFLAGS="-r"
	[ $VERBOSE -eq 1 ] && MKDIRFLAGS="-pv" || MKDIRFLAGS="-p"

	# Choose whether or not we should create a new module, and check that the module path was specified.
	if [ $CREATE_NEW_MOD -eq 0 ]
	then
		[ -z "$MODPATH" ] && err "No module path to copy module to (use --to)." 1
		[ -d "$MODPATH" ] || err "Module path directory does not exist (try using --new if you intend to create a new directory)" 1
	else
		[ -z "$MODPATH" ] && err "No path specified for creation of new module (use --to)." 1
		[ -d "$MODPATH" ] && err "Module path directory already exists. Refusing to overwrite existing directory." 1
		mkdir $MKDIRFLAGS $MODPATH/{api,app,assets,components,db,overrides,routes,setup,sql,std,views}/ \
			|| err "Failed to create directory $MODPATH" 1
	fi

	#...
	#echo $MODNAME $FOLDER $MODPATH

	# Copy each of the module's directories
	for ff in api app assets misc overrides setup sql views; do
		# If a dir doesn't exist, warn the user that you need the create option
		[ ! -d $FOLDER/$ff/ ] && {
			err "$FOLDER/$ff does not exist.  If you are trying to extract a module into a new directory, use --new in conjunction with the flags used to get here." 
		}

		[ -d $FOLDER/$ff/$MODNAME/ ] && cp $CPFLAGS $FOLDER/$ff/$MODNAME/ $MODPATH/$ff/
	done

	# Then copy files that SHOULD belong to the module
	[ -f "$FOLDER/components/${MODNAME}.cfc" ] && cp $CPFLAGS $FOLDER/components/${MODNAME}.cfc $MODPATH/components/
	[ -f "$FOLDER/routes/${MODNAME}.cfm" ] && cp $CPFLAGS $FOLDER/routes/${MODNAME}.cfm $MODPATH/routes/
fi


# Merge 
if [ $DO_MERGE -eq 1 ]
then
	# check that there is actually an instance
	[ -z "$MODNAME" ] && err "Can't extract unspecified package (--extract needs an argument)." 1
	[ -z "$FOLDER" ] && err "No folder to extract module from (use --folder)." 1
	[ -z "$MERGE_DIR" ] && err "No directory for creation specified (use --directory)" 1
	# check that there is a module specified
	# echo $MODNAME $FOLDER $EXTRACT_DIR

	# Make a place for modules...
	mkdir -pv /tmp/$MODNAME/{api,app,assets,components,db,routes,setup,sql,std,views}/

	# Integrate the files and any dependencies 
	for ff in api app assets components setup sql views
	do
		[ -d $FOLDER/$ff/$MODNAME/ ] && cp -rv $FOLDER/$ff/$MODNAME/ /tmp/$MODNAME/$ff/
	done

	# ???
	[ -f "$FOLDER/components/${MODNAME}.cfc" ] && \
		cp -v $FOLDER/components/${MODNAME}.cfc /tmp/$MODNAME/components/
	[ -f "$FOLDER/routes/${MODNAME}.cfm" ] && \
		cp -v $FOLDER/routes/${MODNAME}.cfm /tmp/$MODNAME/routes/

	# Finally, tarball this and copy over the original repository (which should be a git repo) 
	# I have to choose a repo type (the web is going to be the best choice)
	# tar cf - /tmp/$MODNAME # | tar xf - -C $REPO/

fi
exit 0

#cp $SRC/share/apache_htaccess $DIR/.htaccess
# vim: ff=unix
