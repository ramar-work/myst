#!/bin/bash -
# -------------------------------------------- #
# mystdb.sh
#
# Summary
# -------
# A datasource creator for myst
#
# Author
# ------
#	Antonio R. Collins II (ramar.collins@gmail.com, rc@tubularmodular.com)
# Copyright 2016-Present, Tubular Modular
# Original Author Date: Tue Jan 22 18:43:59 EST 2019
#
# Usage
# -----
# ???
# 	
# TODO
# ----
# -------------------------------------------- #

PROGRAM_NAME=`basename $0`
SYMNAME=myst
CONF_FILE=/etc/myst.conf
LIB_FILE=share/myst/mystlib.sh

DB_NAME=
DB_SYMNAME=
DB_USER=
DB_PWD=
DB_REMOTEHOST=
DB_PORT=
FOLDER=

REMOTE_HOST=
DO_PGSQL=0
DO_MYSQL=0
DO_MSSQL=0
DO_DRYRUN=0

VERBOSE=0
DO_GLOBAL=0
DO_CREATE=0
DO_GENERATE=0


CONF_DBCONNLIMIT=100
CONF_DBUSERNAME=
CONF_DBPASSWORD=
CONF_DBPORT=
DATASOURCE_FILE=
TMPFILE=/tmp/app.cfc

# An error function
err() {
	STATUS=${2:-0}
	printf "$PROGRAM_NAME: $1\n" > /dev/stderr
	exit $STATUS
}


# Generate a usage message
usage() {
	STATUS=${2:-0}
	cat <<EOF
$PROGRAM_NAME:
-c, --create            Create a datasource block. 
-g, --generate          Generate a datasource on the database server.
-f, --folder <arg>      Add the datasource to the app at <arg>
-n, --name <arg>        Datasource will have name <arg>
-u, --user <arg>        Use this user name with the new data source.
    --password <arg>    Use this password with the new data source.
-c, --max-conn <arg>    How many connections should the new data source be able to take?
    --remote <arg>      The location of a remote server that this should attach to.
-p, --postgres          Assume the source is a PostgreSQL data source.
-m, --mysql             Assume the source is a MySQL data source.
-s, --mssql             Assume the source is a Microsoft SQL server data source.
    --global            Create the datasource globally versus in one locked down context.
    --dry-run           Do a dry run, change no files.
-v, --verbose           Be verbose.
-h, --help              Show help.
EOF
	exit $STATUS
}


# Check for dependencies
check() {
	if [ -z "$1" ]
	then 
		printf "check(): No list specified.  Fix this.\n"
		exit 1
	fi	

	IFS='|'
	for n in $1
	do 
		sh -c ${n} 2>/dev/null
		if [ $? -eq 127 ]
		then 
			printf "$PROGRAM_NAME: Dependency '$n' not found.  " > /dev/stderr
			printf "Please install package '$n' using a package manager.\n" > /dev/stderr
		fi
	done
	IFS=" "
}



# Determine whether an argument is a flag or not
# Some tests
#detFlag "boss"
#detFlag "-a"
#detFlag "-"
#detFlag "--achoo"
detFlag() {
	if [ -z "$1" ]
	then
		echo -1 
	else
		# arg is a single, lonely dash
		if [ ${#1} -eq 1 ] && [ $1 == '-' ] 
		then
			echo 0

		# arg is a short arg flag 
		elif [ ${1:0:1} == '-' ] && [[ ${1:1:1} =~ [a-z] ]]
		then
			echo -1 

		# arg is a long arg flag 
		elif [ ${1:0:1} == '-' ] && [ ${1:1:1} == '-' ]
		then
			echo -1 

		# arg is an arg
		else
			echo 1

		fi
	fi
}


# Check for the config file, and lib files, stopping if either isn't present. 
[ ! -f $CONF_FILE ] && \
	err "$PNAME is not installed yet.  Please run 'make install' from $PNAME's source directory.\n"  1
source $CONF_FILE
[ ! -d $PREFIX ] && err "$PNAME didn't install correctly (couldn't find source directory $PREFIX)\n" 1
[ ! -f $PREFIX/$LIB_FILE ] && err "$PNAME didn't install correctly (couldn't find $LIB_FILE)\n" 1
source $PREFIX/$LIB_FILE


# Catch blank arguments
[ $# -eq 0 ] && usage 0 


# Process any options
while [ $# -gt 0 ]
do
	case "$1" in
		-c|--create)	
			DO_CREATE=1
		;;
		-g|--generate)	
			DO_GENERATE=1	
		;;
		-f|--folder)	
			CODE=`detFlag "$2"`;
			test $CODE -lt 1 && err "$1 needs an argument, got '${2:-(nil)}'. Exiting..." 1
			shift
			FOLDER="$1"
		;;
		-n|--name)	
			CODE=`detFlag "$2"`;
			test $CODE -lt 1 && err "$1 needs an argument, got '${2:-(nil)}'. Exiting..." 1
			shift
			DB_NAME="$1"
		;;

		-x|--max-conn)	
			CODE=`detFlag "$2"`;
			test $CODE -lt 1 && err "$1 needs an argument, got '${2:-(nil)}'. Exiting..." 1
			shift
			CONF_DBCONNLIMIT=$1
		;;

		-u|--user)	
			CODE=`detFlag "$2"`;
			test $CODE -lt 1 && err "$1 needs an argument, got '${2:-(nil)}'. Exiting..." 1
			shift
			DB_USER="$1"
		;;
		--password)	
			CODE=`detFlag "$2"`;
			test $CODE -lt 1 && err "$1 needs an argument, got '${2:-(nil)}'. Exiting..." 1
			shift
			DB_PWD="$1"
		;;
		--remote)	
			CODE=`detFlag "$2"`;
			test $CODE -lt 1 && err "$1 needs an argument, got '${2:-(nil)}'. Exiting..." 1
			shift
			DB_REMOTEHOST="$1"
		;;
		--global)	
			err "--global argument is not yet supported." 1
			DO_GLOBAL=1	
		;;
		--dry-run)	
			DO_DRYRUN=1
		;;
		-p|--postgres)	
			DO_PGSQL=1
		;;
		-m|--mysql)	
			DO_MYSQL=1
		;;
		-s|--mssql)	
			DO_MSSQL=1
		;;
		-v|--verbose)	
			VERBOSE=1
		;;

		-h|--help)	
			usage 0
		;;

		--)	break
		;;

		-*)	printf "$PROGRAM_NAME: Unknown argument received: $1\n" > /dev/stderr; usage 1
		;;
	esac
	shift
done


# Set all the verbose flags...
CPFLAGS=
if [ $VERBOSE -eq 1 ] 
then
	CPFLAGS="-v"
fi


# Include the file and check that prefix exists
[ ! -d $PREFIX ] && err "$PROPNAME didn't install correctly (couldn't find source directory $PREFIX)\n" 1


# Set a default port
[ $DO_PGSQL -eq 1 ] && { CONF_DBPORT=${CONN_DBPORT:-0}; DBSUFFIX="pgsql"; }
[ $DO_MYSQL -eq 1 ] && { CONF_DBPORT=${CONN_DBPORT:-3306}; DBSUFFIX="mysql"; }
[ $DO_MSSQL -eq 1 ] && { CONF_DBPORT=${CONN_DBPORT:-1433}; DBSUFFIX="mssql"; }
DB_SYMNAME=${DB_SYMNAME:-$DB_NAME}
DATASOURCE_FILE=$PREFIX/share/myst/${DBSUFFIX}-db.cfc


# Check that actions and types have been received...
if [ 1 -eq 1 ]
then
	[ $DO_MYSQL -eq 0 ] && [ $DO_PGSQL -eq 0 ] && [ $DO_MSSQL -eq 0 ] && err "No database backend chosen." 1
	[ $DO_GENERATE -eq 0 ] && [ $DO_CREATE -eq 0 ] && err "No actions chosen (try --generate or --create)." 1
fi


# 
if [ $DO_DRYRUN -eq 1 ]
then
	TMPFILE=/dev/stdout
fi


# We can optionally create the datasource if it's running.
# On Linux, these are just their own servers.
if [ $DO_CREATE -eq 1 ]
then
	[ -z "$DB_NAME" ] && \
		err "No database name specified.  (Try --name \$DBNAME)." 1

	[ -z "$DB_USER" ] && \
		err "No database user specified.  (Try --user \$USERNAME)." 1


	# who to do this as most likely.
	if [ $DO_PGSQL -eq 1 ]
	then
		printf ''
	fi


	if [ $DO_MYSQL -eq 1 ]
	then
		# if there's a password, use it
		mysql -u $DB_USER -e "CREATE DATABASE $DB_NAME"	
	fi


	if [ $DO_MSSQL -eq 1 ]
	then
		# -U user
		# -P pass
		# -S server 
		# -Q execute and stop
		sqlcmd -U $DB_USER -Q "CREATE DATABASE $DB_NAME"	
	fi

fi



# Generate a datasource
if [ $DO_GENERATE -eq 1 ]
then
	# Do not continue if global and no folder specified.
	if [ $DO_GLOBAL -ne 1 ] 
	then
		[ -z "$FOLDER" ] && \
			err "No myst instance specified.  (Try --folder \$DBNAME)." 1

		[ ! -d "$FOLDER" ] && \
			err "Myst instance specified does not exist..." 1
	fi

	[ -z "$DATASOURCE_FILE" ] && \
		err "No database backend specified. (Use --mysql, --mssql, or --postgresql to specify one)." 1

	[ -z "$DB_NAME" ] && \
		err "No database name specified.  (Try --name \$DBNAME)." 1

	[ -z "$DB_USER" ] && \
		err "No database user specified.  (Try --user \$USERNAME)." 1

	#[ -z "$DB_PWD" ] &&
		#err "No database password specified for user.  (Try --password \$PASSWORD)." 1

	# Check for Application.cfc	
	[ ! -f "$FOLDER/Application.cfc" ] && \
		err "No Application.cfc found at instance '$FOLDER'" 1

	# Find the start of the component 
	# TODO: note that this does not support non-script components
	STARTLINE=`grep --line-number 'component {' $FOLDER/Application.cfc | \
		awk -F ':' '{ print $1 }'`
	[ -z "$STARTLINE" ] && \
		err "Could not find component declaration at Application.cfc in '$FOLDER'" 1

	# Check for any data source strings, and try not to blow them away
	DS_EXISTS=`grep 'BEGIN: mystdb' $FOLDER/Application.cfc >/dev/null && echo 1 || echo 0`
	if [ $DS_EXISTS -eq 1 ]
	then 
		err "found mystdb datasource" 1
		# make a copy
		# delete the original one
	fi

	# Check for any data source strings, and try not to blow them away
	DS_DECL=`grep 'this.datasources' $FOLDER/Application.cfc >/dev/null && echo 1 || echo 0`
	DS_STARTSTRING=
	DS_ENDSTRING=
	#echo $DS_DECL
	if [ $DS_DECL -eq 0 ]
	then
		DS_STARTSTRING="this.datasources = {"
		DS_ENDSTRING="};"
	fi

	# Make a backup here...
	[ $DO_DRYRUN -eq 0 ] && cp $CPFLAGS $FOLDER/Application.cfc $FOLDER/Application.cfc.bkp
	# NOTE: (if only there were a way to test and made sure things worked...)

	# Do a SELECT of USERS or DATABASES on each.  The user will have to specify
	# who to do this as most likely.
	if [ $DO_PGSQL -eq 1 ]
	then
		printf ''
	fi

	# set the write path of the new file
	# TODO: Even with the shell, there is a way to write to memory...
	# TMPFILE="$FOLDER/Application.cfc"	

	# Assemble the file differently...
	[ $DO_DRYRUN -eq 0 ] && sed -n "1,${STARTLINE}p" $FOLDER/Application.cfc > $TMPFILE

	# Add the datasource string...
	if [ $DO_PGSQL -eq 1 ]
	then
		printf ''>/dev/null
	fi

	# Add the datasource string...
	if [ $DO_MYSQL -eq 1 ]
	then
		# a full mysql datasource looks like this:
		# ---
		# this.datasources["rcdb"] = {
		# 	  class: 'com.mysql.jdbc.Driver'
		# 	, bundleName: 'com.mysql.jdbc'
		# 	, bundleVersion: '5.1.40'
		# 	, connectionString: 'jdbc:mysql://localhost:3306/rcdb?useUnicode=true&characterEncoding=UTF-8&zeroDateTimeBehavior=round&tinyInt1isBit=false&autoReconnect=false&jdbcCompliantTruncation=false&allowMultiQueries=true&useLegacyDatetimeCode=true'
		# 	, username: 'adam'
		# 	, password: "encrypted:77007680f0a139ebc51fead12332d09b8e0a495236f2e3ff973489aebab6acf1"
		# 	
		# 	// optional settings
		# 	, blob:true // default: false
		# 	, clob:true // default: false
		# 	, connectionLimit:100 // default:-1
		# };

		# Print out a block...
		DB_REMOTEHOST=localhost
		DB_PORT=3306		
		{
		cat <<EOF
	$DS_STARTSTRING
		//mystdb BEGIN: mystdb added '$DB_SYMNAME' on `date +%F`
		"$DB_SYMNAME" = {
				class: 'org.gjt.mm.mysql.Driver'
			, connectionString: 'jdbc:mysql://$DB_REMOTEHOST:$DB_PORT/$DB_NAME?useUnicode=true&characterEncoding=UTF-8&useLegacyDatetimeCode=true&allowMultiQueries=true'
			, username: '$DB_USER'
			, password: '$DB_PWD'
		}
		//mystdb END
	$DS_ENDSTRING	
EOF
		} >> $TMPFILE
	fi


	if [ $DO_MSSQL -eq 1 ]
	then
		# A full MSSQL datasource will look something like this...
		# ----
		# this.datasources["cwnetdb"] = {
		# 	  class: 'com.microsoft.sqlserver.jdbc.SQLServerDriver'
		# 	, bundleName: 'mssqljdbc4'
		# 	, bundleVersion: '4.0.2206.100'
		# 	, connectionString: 'jdbc:sqlserver://localhost:1433;DATABASENAME=cw_netdb;sendStringParametersAsUnicode=true;SelectMethod=direct'
		# 	, username: 'SA'
		# 	, password: "encrypted:909d4f7eb7f2777dffd72775ce8f7ba7f89af5b477428d06fd114f599601b258"
		# 	
		# 	// optional settings
		# 	, blob:yes // default: false
		# 	, clob:yes // default: false
		# 	, connectionLimit:100 // default:-1
		# 	, storage:yes // default: false
		# };
		# Print out a block...
		DB_REMOTEHOST=localhost
		DB_PORT=1433
		# This needs to be encrypted and salted... (and prefixed w/ the word 'encrypted:')
		DB_PASS=$DB_PWD
		DB_CONNLIMIT=-1

		{
		cat <<EOF
	$DS_STARTSTRING
		//mystdb BEGIN: mystdb added '$DB_SYMNAME' on `date +%F`
		"$DB_SYMNAME" = {
				class: 'com.microsoft.sqlserver.jdbc.SQLServerDriver'
			, bundleName: 'mssqljdbc4'
			, bundleVersion: '4.0.2206.100'
			, connectionString: 'jdbc:sqlserver://$DB_REMOTEHOST:$DB_PORT;DATABASENAME=$DB_NAME;sendStringParametersAsUnicode=true;SelectMethod=direct'
			, username: '$DB_USER'
			, password: '$DB_PWD'
			, connectionLimit: $DB_CONNLIMIT 
		}
		//mystdb END
	$DS_ENDSTRING
EOF
	} >> $TMPFILE 
	fi

	# Append the rest of the file to stdout
	[ $DO_DRYRUN -eq 0 ] && sed -n "$(( $STARTLINE + 1 )),\$p" $FOLDER/Application.cfc  >> $TMPFILE

	# Copy the file for real 
	[ $DO_DRYRUN -eq 0 ] && cp $CPFLAGS $TMPFILE $FOLDER/Application.cfc	

	if [ 0 -eq 1 ]; then
	# Replace everything
	sed -i -e "{
		s/__DBNAME__/$DB_NAME/;
		s/__DBSYMNAME__/$DB_SYMNAME/;
		s/__DBCONNLIMIT__/$CONF_DBCONNLIMIT/;
		s/__DBUSERNAME__/$DB_USER/;
		s/__DBPASSWORD__/$DB_PWD/;
		s/__DBPORT__/$CONF_DBPORT/;
	}" $DATASOURCE_FILE
	fi
fi
