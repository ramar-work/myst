#!/bin/bash -
# -------------------------------------------- #
# mystdb.sh
#
# Summary
# -------
# A datasource creator for myst
#
# Author
# ------
#	Antonio R. Collins II (ramar.collins@gmail.com, rc@tubularmodular.com)
# Copyright 2016-Present, Tubular Modular
# Original Author Date: Tue Jan 22 18:43:59 EST 2019
#
# Usage
# -----
# ???
# Datasources in Lucee's context file adhere to XML formats loosely matching the below:

#<data-source allow="511" always-set-timeout="true" blob="false" class="com.mysql.cj.jdbc.Driver" clob="false" connectionTimeout="1" custom="useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=America%2FNew_York&amp;useLegacyDatetimeCode=true" database="fifty9_db" dbdriver="MySQL" dsn="jdbc:mysql://{host}:{port}/{database}" host="localhost" id="mysql" metaCacheTimeout="60000" name="fifty9_db" param-delimiter="&amp;" param-leading-delimiter="?" param-separator="=" password="encrypted:7c4902954c642620e2f291002d7af419664aa46e5d0cfa90" port="3306" storage="false" username="local" validate="false"/>
#
#<data-source allow="511" blob="false" class="com.microsoft.sqlserver.jdbc.SQLServerDriver" clob="false" connectionTimeout="1" custom="DATABASENAME=sqlserver_test&amp;sendStringParametersAsUnicode=true&amp;SelectMethod=direct" database="sqlserver_test" dbdriver="MSSQL" dsn="jdbc:sqlserver://{host}:{port}" host="localhost" id="mssql" metaCacheTimeout="60000" name="sqlserver_test" param-delimiter=";" param-leading-delimiter=";" param-separator="=" password="encrypted:820015ab4f08a18b3dead86a771515d0b0fc415e2ae5acd091a4b32811d151e4" port="1433" storage="false" username="SA" validate="false"/>
#
#<data-source allow="511" blob="false" class="org.postgresql.Driver" clob="false" connectionTimeout="1" custom="" database="postgres_test" dbdriver="PostgreSql" dsn="jdbc:postgresql://{host}:{port}/{database}" host="localhost" metaCacheTimeout="60000" name="postgres_test" param-delimiter="&amp;" param-leading-delimiter="?" param-separator="=" password="encrypted:6e88d695ecee23f14a143976784522bc6c99b48c7e26e3e2" port="5432" storage="false" username="local" validate="false"/></data-sources>
# 	
# TODO
# ----
# -------------------------------------------- #

PROGRAM_NAME=`basename $0`
SYMNAME=myst
CONF_FILE=/etc/myst.conf
LIB_FILE=share/myst/mystlib.sh

DB_NAME=
DB_SYMNAME=
DB_USER=
DB_PWD=
DB_REMOTEHOST=
DB_PORT=
FOLDER=

REMOTE_HOST=
DO_PGSQL=0
DO_MYSQL=0
DO_MSSQL=0
DO_DRYRUN=0

VERBOSE=0
DO_GLOBAL=1
DO_CREATE=0
DO_GENERATE=0


CONF_DBCONNLIMIT=100
CONF_DBUSERNAME=
CONF_DBPASSWORD=
CONF_DBPORT=
#DATASOURCE_FILE=
TMPFILE=/tmp/app.cfc

# An error function
err() {
	STATUS=${2:-0}
	printf "$PROGRAM_NAME: $1\n" > /dev/stderr
	exit $STATUS
}


# Generate a usage message
usage() {
	STATUS=${2:-0}
	cat <<EOF
$PROGRAM_NAME:
-c, --create <arg>      Create a database with host tooling.
-g, --generate <arg>    Generate a datasource on the database server.
-n, --name <arg>        Datasource will have name <arg>
-u, --user <arg>        Use this user name with the new data source.
    --password <arg>    Use this password with the new data source.
-c, --max-conn <arg>    How many connections should the new data source be able to take?
    --remote <arg>      The location of a remote server that this should attach to.
-p, --postgres          Assume the source is a PostgreSQL data source.
-m, --mysql             Assume the source is a MySQL data source.
-s, --mssql             Assume the source is a Microsoft SQL server data source.
    --global            Create the datasource globally versus in one locked down context.
    --dry-run           Do a dry run, change no files.
    --dump              Dump the configuration values that would result with a particular cli invocation

Context Specific:
-f, --folder <arg>      Add the datasource to the app at <arg>

-v, --verbose           Be verbose.
-h, --help              Show help.
EOF
	exit $STATUS
}


# Check for dependencies
check() {
	if [ -z "$1" ]
	then 
		printf "check(): No list specified.  Fix this.\n"
		exit 1
	fi	

	IFS='|'
	for n in $1
	do 
		sh -c ${n} 2>/dev/null
		if [ $? -eq 127 ]
		then 
			printf "$PROGRAM_NAME: Dependency '$n' not found.  " > /dev/stderr
			printf "Please install package '$n' using a package manager.\n" > /dev/stderr
		fi
	done
	IFS=" "
}



# Determine whether an argument is a flag or not
# Some tests
#detFlag "boss"
#detFlag "-a"
#detFlag "-"
#detFlag "--achoo"
detFlag() {
	if [ -z "$1" ]
	then
		echo -1 
	else
		# arg is a single, lonely dash
		if [ ${#1} -eq 1 ] && [ $1 == '-' ] 
		then
			echo 0

		# arg is a short arg flag 
		elif [ ${1:0:1} == '-' ] && [[ ${1:1:1} =~ [a-z] ]]
		then
			echo -1 

		# arg is a long arg flag 
		elif [ ${1:0:1} == '-' ] && [ ${1:1:1} == '-' ]
		then
			echo -1 

		# arg is an arg
		else
			echo 1

		fi
	fi
}


# Check for the config file, and lib files, stopping if either isn't present. 
[ ! -f $CONF_FILE ] && \
	err "$PNAME is not installed yet.  Please run 'make install' from $PNAME's source directory.\n"  1
source $CONF_FILE
[ ! -d $PREFIX ] && err "$PNAME didn't install correctly (couldn't find source directory $PREFIX)\n" 1
[ ! -f $PREFIX/$LIB_FILE ] && err "$PNAME didn't install correctly (couldn't find $LIB_FILE)\n" 1
source $PREFIX/$LIB_FILE


# Catch blank arguments
[ $# -eq 0 ] && usage 0 


# Process any options
while [ $# -gt 0 ]
do
	case "$1" in
		-c|--create)	
			DO_CREATE=1
			CODE=`detFlag "$2"`;
			test $CODE -lt 1 && err "$1 needs an argument, got '${2:-(nil)}'. Exiting..." 1
			shift
			DB_NAME="$1"
		;;
		-g|--generate)	
			DO_GENERATE=1	
			CODE=`detFlag "$2"`;
			test $CODE -lt 1 && err "$1 needs an argument, got '${2:-(nil)}'. Exiting..." 1
			shift
			DB_NAME="$1"
		;;
		-f|--folder)	
			CODE=`detFlag "$2"`;
			test $CODE -lt 1 && err "$1 needs an argument, got '${2:-(nil)}'. Exiting..." 1
			shift
			FOLDER="$1"
		;;
		-n|--name)	
			CODE=`detFlag "$2"`;
			test $CODE -lt 1 && err "$1 needs an argument, got '${2:-(nil)}'. Exiting..." 1
			shift
			DB_NAME="$1"
		;;

		-x|--max-conn)	
			CODE=`detFlag "$2"`;
			test $CODE -lt 1 && err "$1 needs an argument, got '${2:-(nil)}'. Exiting..." 1
			shift
			CONF_DBCONNLIMIT=$1
		;;

		-u|--user)	
			CODE=`detFlag "$2"`;
			test $CODE -lt 1 && err "$1 needs an argument, got '${2:-(nil)}'. Exiting..." 1
			shift
			DB_USER="$1"
		;;
		--password)	
			CODE=`detFlag "$2"`;
			test $CODE -lt 1 && err "$1 needs an argument, got '${2:-(nil)}'. Exiting..." 1
			shift
			DB_PWD="$1"
		;;
		--remote)	
			CODE=`detFlag "$2"`;
			test $CODE -lt 1 && err "$1 needs an argument, got '${2:-(nil)}'. Exiting..." 1
			shift
			DB_REMOTEHOST="$1"
		;;
		--global)	
			err "--global argument is not yet supported." 1
			DO_GLOBAL=1	
		;;
		--dry-run)	
			DO_DRYRUN=1
		;;
		-p|--postgres)	
			DO_PGSQL=1
		;;
		-m|--mysql)	
			DO_MYSQL=1
		;;
		-s|--mssql)	
			DO_MSSQL=1
		;;
		-v|--verbose)	
			VERBOSE=1
		;;

		-h|--help)	
			usage 0
		;;

		--)	break
		;;

		-*)	printf "$PROGRAM_NAME: Unknown argument received: $1\n" > /dev/stderr; usage 1
		;;
	esac
	shift
done


# Dump options
dumpopts() {
	printf "%-25s%s\n" "DB NAME" $DB_NAME
	printf "%-25s%s:%s\n" "USERNAME" $DB_USER ${DB_PWD:-"-"}
	printf "%-25s%s\n" "ALLOW permissions" $ALLOW
	printf "%-25s%s\n" "BLOB enabled?" $BLOB
	printf "%-25s%s\n" "CLOB enabled?" $CLOB
	printf "%-25s%s\n" "CONNECTION TIMEOUT" $CONNECTION_TIMEOUT
	printf "%-25s%s\n" "CUSTOM" $CUSTOM
	printf "%-25s%s\n" "DATABASE" $DATABASE
	printf "%-25s%s\n" "DB DRIVER" $DB_DRIVER
	printf "%-25s%s\n" "DSN" $DSN
	printf "%-25s%s\n" "HOST" $HOST
	printf "%-25s%s\n" "ID" $ID
	printf "%-25s%s\n" "META CACHE TIMEOUT" $META_CACHE_TIMEOUT
	printf "%-25s%s\n" "NAME" $NAME
	printf "%-25s%s\n" "PORT" $PORT
	printf "%-25s%s\n" "STORAGE" $STORAGE
	printf "%-25s%s\n" "VALIDATE" $VALIDATE
	printf "%-25s%s\n" "Extra options" $EXTRA_OPTIONS
}

# Dump a datasource in Lucee's XML format
dumpxml() {
	printf "<data-source allow=\"$ALLOW\" $EXTRA_OPTIONS blob=\"$BLOB\" class=\"$CLASS\" clob=\"$CLOB\" connectionTimeout=\"$CONNECTION_TIMEOUT\" custom=\"$CUSTOM\" database=\"$DATABASE\" dbdriver=\"$DBDRIVER\" dsn=\"$DSN\" host=\"$HOST\" id=\"$ID\" metaCacheTimeout=\"$META_CACHE_TIMEOUT\" name=\"$DB_NAME\" param-delimiter=\"&amp;\" param-leading-delimiter=\"?\" param-separator=\"=\" password=\"$PASSWORD\" port=\"$PORT\" storage=\"$STORAGE\" username=\"$DB_USER\" validate=\"$VALIDATE\"/>\n"
}

# Set all the verbose flags...
[ $VERBOSE -eq 1 ] && CPFLAGS="-V" || CPFLAGS=

# Include the file and check that prefix exists
[ ! -d $PREFIX ] && err "$PROPNAME didn't install correctly (couldn't find source directory $PREFIX)\n" 1

# Set a default port
[ $DO_PGSQL -eq 1 ] && { CONF_DBPORT=${CONN_DBPORT:-5432}; DB_SUFFIX="pgsql"; DB_DRIVER="PostgreSql"; }
[ $DO_MYSQL -eq 1 ] && { CONF_DBPORT=${CONN_DBPORT:-3306}; DB_SUFFIX="mysql";  DB_DRIVER="MySQL"; }
[ $DO_MSSQL -eq 1 ] && { CONF_DBPORT=${CONN_DBPORT:-1433}; DB_SUFFIX="mssql"; DB_DRIVER="MSSQL"; }
DB_SYMNAME=${DB_SYMNAME:-$DB_NAME}
#DATASOURCE_FILE=$PREFIX/share/myst/${DB_SUFFIX}-db.cfc


# Check that actions and types have been received...
if [ 1 -eq 1 ]
then
	[ $DO_MYSQL -eq 0 ] && [ $DO_PGSQL -eq 0 ] && [ $DO_MSSQL -eq 0 ] && err "No database backend chosen." 1
	[ $DO_GENERATE -eq 0 ] && [ $DO_CREATE -eq 0 ] && err "No actions chosen (try --generate or --create)." 1
fi


# 
if [ $DO_DRYRUN -eq 1 ]
then
	TMPFILE=/dev/stdout
fi


# We can optionally create the datasource if it's running.
# On Linux, these are just their own servers.
if [ $DO_CREATE -eq 1 ]
then
	[ -z "$DB_NAME" ] && \
		err "No database name specified.  (Try --name \$DBNAME)." 1

	[ -z "$DB_USER" ] && \
		err "No database user specified.  (Try --user \$USERNAME)." 1

	# who to do this as most likely.
	[ $DO_PGSQL -eq 1 ] && \
		err "Postgres is not currently supported." 1 

	[ $DO_MYSQL -eq 1 ] && {
		mysql -u $DB_USER --password=$DB_PWD -e "CREATE DATABASE $DB_NAME"	
	}

	[ $DO_MSSQL -eq 1 ] && {
		# -U user, -P pass, -S server, -Q execute and stop
		sqlcmd -U $DB_USER -P "$DB_PWD" -Q "CREATE DATABASE $DB_NAME"	
	}	
fi



# Generate a datasource
if [ $DO_GENERATE -eq 1 ]
then
	# Do not continue if global and no folder specified.
	if [ $DO_GLOBAL -ne 1 ] 
	then
		[ -z "$FOLDER" ] && \
			err "No myst instance specified.  (Try --folder \$DBNAME)." 1

		[ ! -d "$FOLDER" ] && \
			err "Myst instance specified does not exist..." 1
	fi

	[ -z "$DB_SUFFIX" ] && \
		err "No database backend specified. (Use --mysql, --mssql, or --postgresql to specify one)." 1

	[ -z "$DB_NAME" ] && \
		err "No database name specified.  (Try --name \$DBNAME)." 1

	[ -z "$DB_USER" ] && \
		err "No database user specified.  (Try --user \$USERNAME)." 1

	#[ -z "$DB_PWD" ] &&
		#err "No database password specified for user.  (Try --password \$PASSWORD)." 1

	# Check for Application.cfc	
	#[ ! -f "$FOLDER/Application.cfc" ] && \
	#	err "No Application.cfc found at instance '$FOLDER'" 1

	# Default options
	ALLOW=511
	BLOB=false
	CLOB=false
	CONNECTION_TIMEOUT=1
	CUSTOM=
	DATABASE="$DB_NAME"
	DBDRIVER="$DB_DRIVER"
	DSN=
	EXTRA_OPTIONS=
	HOST="localhost"
	ID=
	META_CACHE_TIMEOUT=60000
	NAME="$DB_NAME"
	PARAM_DELIMITER="&amp;"
	PARAM_LEADING_DELIMITER="?"
	PARAM_SEPARATOR="="
	PASSWORD="$DB_PWD"
	PORT="$CONF_DBPORT"
	STORAGE=false
	USERNAME="$DB_USER"
	VALIDATE=false

	if [ $DO_MYSQL -eq 1 ]
	then
		CLASS="com.mysql.cj.jdbc.Driver"
		CUSTOM="useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=America%2FNew_York&amp;useLegacyDatetimeCode=true"
		DSN="jdbc:mysql://{host}:{port}/{database}"
		ID="mysql"
		PORT=3306
		EXTRA_OPTIONS='always-set-timeout="true"'
	elif [ $DO_MSSQL -eq 1 ]
	then
		CLASS="com.microsoft.sqlserver.jdbc.SQLServerDriver"
		CUSTOM="DATABASENAME=sqlserver_test&amp;sendStringParametersAsUnicode=true&amp;SelectMethod=direct"
		DSN="jdbc:sqlserver://{host}:{port}"
		ID="mssql"
		PORT=1433
	elif [ $DO_PGSQL -eq 1 ]
	then
		CLASS="org.postgresql.Driver"
		DSN="jdbc:postgresql://{host}:{port}/{database}"
		ID="postgresql"
		PORT=5432
	fi

	DB_CONFPATH=$PREFIX/tomcat/lucee-server/context/lucee-server.xml

	# First check that the data source is not there
	[ ! -z "$( cat $DB_CONFPATH | grep '<data-source ' | grep "name=\"$DB_NAME\"" )" ] && \
		err "Datasource $DB_NAME is already present in Lucee config." 1
	
	# Then get the line number of the configuration
	DB_SRCLINE=$( cat $DB_CONFPATH | grep --line-number '<data-source ' | awk -F ':' '{ print $1 }' )
	[ -z "$DB_SRCLINE" ] && \
		err "Could not locate database configuration in $DB_CONFPATH" 1

	# finally, make a backup of the original 
	DB_SRCCONF=$( cat $DB_CONFPATH | grep '<data-source ' )
	cp $DB_CONFPATH `dirname $DB_CONFPATH`/lucee-server-bkp.xml

	# And add the new line
	DB_NEWSRC=$( echo "$DB_SRCCONF" | sed "s#</data-sources>##" )
	sed -i "${DB_SRCLINE}d" $DB_CONFPATH
	sed -i "${DB_SRCLINE}i $DB_NEWSRC`dumpxml`</data-sources>" $DB_CONFPATH

	# How do I test this file?
	# $DB_CONFPATH
	
fi
exit 0
